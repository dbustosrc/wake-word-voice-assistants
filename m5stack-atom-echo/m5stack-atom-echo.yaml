substitutions:
  name: m5stack-atom-echo
  friendly_name: M5Stack Atom Echo
  micro_wake_word_model: hey_jarvis #okay_nabu  # alexa, hey_jarvis, hey_mycroft are also supported

esphome:
  name: ${name}
  name_add_mac_suffix: true
  friendly_name: ${friendly_name}
  min_version: 2025.2.0

esp32:
  board: m5stack-atom
  framework:
    type: esp-idf
    version: 4.4.8
    platform_version: 5.4.0

#logger:
api:

ota:
  - platform: esphome
    id: ota_esphome

wifi:
  ap:

captive_portal:

button:
  - platform: factory_reset
    id: factory_reset_btn
    name: Factory reset

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO33 # Necesario para el micrófono
    i2s_bclk_pin: GPIO19  # Necesario para el micrófono
    # i2s_dout_pin no es necesario si no hay speaker

microphone:
  - platform: i2s_audio
    id: echo_microphone
    i2s_din_pin: GPIO23
    adc_type: external
    pdm: true

# SECCIÓN SPEAKER ELIMINADA
# speaker:
#   - platform: i2s_audio
#     id: echo_speaker
#     i2s_dout_pin: GPIO22
#     dac_type: external
#     bits_per_sample: 32bit
#     channel: right
#     buffer_duration: 60ms

# SECCIÓN MEDIA_PLAYER ELIMINADA
# media_player:
#   - platform: speaker
#     name: None
#     id: echo_media_player
#     announcement_pipeline:
#       speaker: echo_speaker
#       format: WAV
#     codec_support_enabled: false
#     buffer_size: 6000
#     volume_min: 0.4
#     files:
#       - id: timer_finished_wave_file
#         file: https://github.com/esphome/wake-word-voice-assistants/raw/main/sounds/timer_finished.wav
#     on_announcement:
#       - if:
#           condition:
#             - microphone.is_capturing:
#           then:
#             - if:
#                 condition:
#                   lambda: return id(wake_word_engine_location).state == "On device";
#                 then:
#                   - micro_wake_word.stop:
#                 else:
#                   - voice_assistant.stop:
#             - script.execute: reset_led
#       - light.turn_on:
#           id: led
#           blue: 100%
#           red: 0%
#           green: 0%
#           brightness: 100%
#           effect: none
#     on_idle:
#       - script.execute: start_wake_word

voice_assistant:
  id: va
  microphone: echo_microphone
  # media_player: echo_media_player # Eliminado ya que no hay media_player
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 4.0 # No aplica sin media_player
  vad_threshold: 1
  on_listening:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: "Slow Pulse"
  on_stt_vad_end:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: "Fast Pulse"
  # on_tts_start: # Eliminado ya que no hay salida de audio para TTS
  #   - light.turn_on:
  #       id: led
  #       blue: 100%
  #       red: 0%
  #       green: 0%
  #       brightness: 100%
  #       effect: none
  on_end:
    - delay: 100ms
    - script.execute: start_wake_word
  on_error:
    - light.turn_on:
        id: led
        red: 100%
        green: 0%
        blue: 0%
        brightness: 100%
        effect: none
    - delay: 1s
    - script.execute: reset_led
  on_client_connected:
    - delay: 1s  # Give the api server time to settle
    - script.execute: start_wake_word
  on_client_disconnected:
    - voice_assistant.stop:
    - micro_wake_word.stop:
  on_timer_finished: # Modificado para no usar el switch de timbre sonoro, solo visual
    - voice_assistant.stop:
    - micro_wake_word.stop:
    - wait_until:
        not:
          microphone.is_capturing:
    # - switch.turn_on: timer_ringing # Ya no se activa el switch que manejaba el sonido
    - light.turn_on: # Indicación visual de que el temporizador ha finalizado
        id: led
        red: 0%
        green: 100%
        blue: 0%
        brightness: 100%
        effect: "Fast Pulse"
    - delay: 10s # Mantiene la luz parpadeando por un tiempo
    - script.execute: reset_led # Vuelve al estado normal del LED

#binary_sensor:
#  - platform: gpio
#    pin:
#      number: GPIO39
#      inverted: true
#    name: Button
#    disabled_by_default: true
#    entity_category: diagnostic
#    id: echo_button
#    on_multi_click:
#      - timing:
#          - ON for at least 50ms
#          - OFF for at least 50ms
#        then:
#          - if:
#              condition:
#                switch.is_on: timer_ringing # Si el switch de "timer_ringing" está encendido (ahora solo visual)
#              then:
#                - switch.turn_off: timer_ringing # Lo apaga
#              else:
#                - script.execute: start_wake_word
#      - timing:
#          - ON for at least 10s
#        then:
#          - button.press: factory_reset_btn

light:
  - platform: esp32_rmt_led_strip
    id: led
    name: None
    disabled_by_default: true
    entity_category: config
    pin: GPIO27
    default_transition_length: 0s
    chipset: SK6812
    num_leds: 1
    rgb_order: grb
    rmt_channel: 0
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

script:
  - id: reset_led
    then:
      - if:
          condition:
            - lambda: return id(wake_word_engine_location).state == "On device";
            - switch.is_on: use_listen_light
          then:
            - light.turn_on:
                id: led
                red: 100%
                green: 89%
                blue: 71%
                brightness: 60%
                effect: none
          else:
            - if:
                condition:
                  - lambda: return id(wake_word_engine_location).state != "On device";
                  - switch.is_on: use_listen_light
                then:
                  - light.turn_on:
                      id: led
                      red: 0%
                      green: 100%
                      blue: 100%
                      brightness: 60%
                      effect: none
                else:
                  - light.turn_off: led
  - id: start_wake_word
    then:
      # Eliminado wait_until para media_player y speaker ya que no existen
      # - wait_until:
      #     and:
      #       - media_player.is_idle:
      #       - speaker.is_stopped:
      - delay: 200ms # Pequeña espera para asegurar que los recursos estén libres
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - voice_assistant.stop
            - micro_wake_word.stop:
            - delay: 1s
            - script.execute: reset_led
            - script.wait: reset_led
            - micro_wake_word.start:
          else:
            - if:
                condition: voice_assistant.is_running
                then:
                  - voice_assistant.stop:
                  - script.execute: reset_led
            - voice_assistant.start_continuous:

switch:
  - platform: template
    name: Use listen light
    id: use_listen_light
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - script.execute: reset_led
    on_turn_off:
      - script.execute: reset_led
  - platform: template # Este switch ahora solo controlará el estado visual del temporizador
    id: timer_ringing
    name: "Timer Visual Indicator" # Nombre opcional para mayor claridad
    optimistic: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      # Ya no se reproduce sonido
      - light.turn_on: # Enciende el LED para indicar visualmente el temporizador
          id: led
          red: 0%
          green: 100%
          blue: 0%
          brightness: 100%
          effect: "Fast Pulse"
      - delay: 15min # Mantiene la indicación visual por 15 minutos o hasta que se apague manualmente
      - switch.turn_off: timer_ringing
    on_turn_off:
      # Ya no se detiene el sonido
      - light.turn_off: led # Apaga el LED cuando el switch se apaga
      - script.execute: reset_led # Opcional: resetear el LED a su estado de escucha

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - if:
          condition:
            lambda: return x == "In Home Assistant";
          then:
            - micro_wake_word.stop
            - delay: 500ms
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
      - if:
          condition:
            lambda: return x == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop
            - delay: 500ms
            - micro_wake_word.start

micro_wake_word:
  on_wake_word_detected:
    - voice_assistant.start:
        wake_word: !lambda return wake_word;
  vad:
  models:
    - model: ${micro_wake_word_model}